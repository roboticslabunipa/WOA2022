/*
   Jason Gradle build file
*/

plugins {
  id "ca.coglinc.javacc" version "2.4.0"
  // see https://github.com/johnmartel/javaccPlugin
}

defaultTasks 'jar'

apply plugin: 'java'
apply plugin: 'maven-publish'

version '3.1'
group   'org.jason'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()

    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    //maven { url "http://jacamo.sourceforge.net/maven2"  }
    //maven { url "http://jade.tilab.com/maven"  //}
    //flatDir {
    //   dirs 'jedit', 'demos/persistent-belief-base/lib'
    //}
}

dependencies {
    implementation group: 'net.sf.ingenias', name: 'jade', version: '4.3'

    //implementation fileTree(dir: 'jedit', include: '*.jar') // using fileTree, jedit jars are not included as a dependency in the pom file

    implementation group: 'org.apache.ant',  name: 'ant',  version: '1.10.5'

    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation name: 'hsqldb'
}

// copy dep jars and scritps into build directory
task copyJarsToBuild {
    inputs.files configurations.runtimeClasspath.files
    inputs.dir   'scripts'
    outputs.dir  'build/libs'
    outputs.dir  'build/scripts'
    doLast {
        copy {
            from configurations.runtimeClasspath
            into 'build/libs'
        }
        copy {
            from 'scripts'
            into 'build/scripts'
            include '**'
            filter {
                String line -> line.replaceAll("JasonREL=[0-9]+\\.[0-9]+", "JasonREL="+project.version)
            }
            filter {
                String line -> line.replaceAll("JadeJar", file(configurations.compileClasspath.find { it.name.startsWith("jade-") }).name)
            }
        }
    }
}

jar {
    archiveBaseName = 'jason'
    manifest {
        attributes 'Main-Class': 'jason.util.ConfigGUI',
                   'Specification-Title': 'Jason Language',
                   'Specification-Version': project.version,
                   'Implementation-Version': new Date().toString()
    }
    from('src') {
        include '/test/jason/inc/**/*.asl'
        include '/test/jason/**/*.mas2j'
    }
}
jar.dependsOn(copyJarsToBuild)

clean {
    delete 'bin'
    delete 'doc/api'
    delete 'doc/faq.html'
    delete 'doc/index.html'
    delete 'doc/readme.html'
    delete 'readme.html'
    delete 'release-notes.html'

    delete fileTree('doc/tutorials')  { include '**/*.html'  }
    delete fileTree('doc/tutorials')  { include '**/bin/**/*'  }

    delete fileTree('.')  { include '**/*~'  }
    delete fileTree('.')  { include '**/.stop___MAS'  }
    delete fileTree('.')  { include '**/APDescription.txt'  }
    delete fileTree('.')  { include '**/MTPs-Main-Container.txt'  }

    delete fileTree('examples')  { include '**/bin/**'  }
    delete fileTree('examples')  { include '**/*.log'  }
    delete fileTree('demos')  { include '**/bin/**'  }
    delete fileTree('demos')  { include '**/*.log'  }
    delete 'demos/persistent-belief-base/a.bb'

    def emptyDirs = []

    fileTree (dir: 'examples').visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    fileTree (dir: 'demos').visit {
        def File f = it.file
        if (f.isDirectory() ) {
            def children = project.fileTree(f).filter { it.isFile() }.files
            if (children.size() == 0) {
                emptyDirs << f
            }
        }
    }
    emptyDirs.reverseEach { it.delete() }
}

//task config (type: JavaExec, dependsOn: ['jar', 'plugin']) {
  task config (type: JavaExec, dependsOn: 'jar') {  
    main = 'jason.util.Config'
    classpath project.buildDir.absolutePath + '/libs/jason-' +project.version+'.jar'
    workingDir project.buildDir.absolutePath + '/libs'

    doFirst {
        delete System.getProperty("user.home")+'/.jason'
    }

    doLast {
        println '------'
        println ''
        println 'you can set the Jason home directory with the following command:'
        println '     export JASON_HOME='+project.buildDir.absolutePath
        println ''
        println 'and also change your PATH with:'
        println '     export PATH=$JASON_HOME/scripts:$PATH'
        println ''
        println '-----'
    }
}

javadoc {
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle('Jason API')
    options.docTitle('Jason API')
    options.footer('<a href=http://jason.sf.net>Jason Site</a>')
    destinationDir = file("${buildDir}/../doc/api")
    doFirst {
        javadoc.title = 'Jason API'
        javadoc.options.docTitle = javadoc.title
    }
}

// the following lines is used to avoid errors while generating javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
}


task javadocJar (type: Jar, dependsOn: javadoc) {
    archiveBaseName = 'jason'
    classifier = 'javadoc'
    from '${docsDir}/../../doc/api'
}

task sourceJar (type : Jar) {
    archiveBaseName = 'jason'
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourceJar, javadocJar
}


// publishing {
//     publications {
//         maven(MavenPublication) {
//             from components.java
//                   artifact sourceJar
//                   artifact javadocJar
//             artifactId 'jason'
//         }
//     }
// }

compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc')
}


jjdoc {
    outputDirectory = file(project.projectDir.absolutePath + '/doc/tech')
    //arguments = [text: 'true']
}

// Builds jEdit plugin
// task plugin(type: Jar, dependsOn: 'jar') {
//     archiveFileName = 'jason-jedit-plugin.jar'
//     destinationDirectory = file('build/jedit/jars')
//     from 'build/classes/java/main'
//     from 'build/resources/main'
//     from 'build/resources/main/jeditPlugin'
//     manifest {
//         attributes 'Main-Class': 'jason.util.ConfigGUI',
//                    'Specification-Title': 'Jason Language',
//                    'Specification-Version': project.version,
//                    'Implementation-Version': new Date().toString()
//     }
//     duplicatesStrategy = 'include'

//     from ( configurations.runtimeClasspath.collect { zipTree(it) } ) {
//         include 'jade/**/*.class'
//         include 'javax/**/*.class'
//     }


//     doFirst {
//         ant.untar(compression: 'gzip', dest: 'build', src: 'jedit/jedit.tgz')
//     }

//     doLast {
//         copy {
//             from 'src/main/resources/jeditPlugin'
//             into 'build/jedit/modes'
//             include 'agentSpeak.xml', 'jasonProject.xml', 'catalog'
//         }
//         copy {
//             from 'src/main/resources/jeditPlugin'
//             into 'build/jedit/properties'
//             include 'jedit-initial.props'
//         }
//     }
// }

// task publishMavenGitHub(dependsOn: [ 'build', 'publishToMavenLocal']) {
//   doLast {
//     def wdir = System.getProperty("user.home")+'/.m2/repository/org/jason/jason'
//     def rdir = '../jacamo-mvn-repo'
//     exec {
//         commandLine 'git', 'pull'
//         workingDir rdir
//     }
//     copy {
//         from wdir
//         into rdir + '/org/jason/jason'
//     }
//     exec {
//         commandLine 'git', 'add', '*'
//         workingDir rdir
//     }
//     exec {
//         commandLine 'git', 'commit', '-a', '-m', 'new version of jason '+project.version
//         workingDir rdir
//     }
//     exec {
//         commandLine 'git', 'push'
//         workingDir rdir
//     }
//   }
// }


// Builds the distribution, documentation and a new release
task doc(dependsOn: [ 'jjdoc', 'javadoc', 'renderAsciiDocs']) {
}

task renderAsciiDocs(type: Exec) {
    commandLine 'find', '.', '-name', '*.adoc', '-exec', 'scripts/asciidoc-docker', '{}', ';'
    //commandLine 'find', '.', '-name', '*.adoc', '-exec', 'asciidoctor', '{}', ';'
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.mas2j,**/*.txt', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '*.gradle', srcdir: '.')
}

// Builds the distribution, documentation and a new release
//task release(dependsOn: [ 'build', 'doc', 'fixTab', 'plugin', 'zipRel' ]) {
task release(dependsOn: [ 'build', 'doc', 'fixTab', 'zipRel' ]) {    
}

// copy files used to build a release
//task copyRel (dependsOn: ['plugin', 'jar']) {
task copyRel (dependsOn: 'jar') {
  doLast {
    copy {
        from '.'
        into 'build/jason-'+project.version
        include '*.html'
        include 'LICENSE'
        include 'doc/**'
    }
    delete fileTree('build/jason-'+project.version+'/doc')  { include '**/*.adoc', '**/Makefile'  }

    copy {
        from 'build/scripts'
        into 'build/jason-'+project.version+'/scripts'
    }
    copy {
        duplicatesStrategy = 'include'
        from 'build/libs'
        from configurations.runtimeClasspath
        into 'build/jason-'+project.version+'/libs'
        include '**/*.jar'
    }
    // copy {
    //     from 'build/jedit'
    //     into 'build/jason-'+project.version+'/jedit'
    // }
    // copy {
    //     from 'examples'
    //     into 'build/jason-'+project.version+'/examples'
    // }
    // copy {
    //     from 'demos'
    //     into 'build/jason-'+project.version+'/demos'
    // }
    copy {
        from 'src'
        into 'build/jason-'+project.version+'/src'
    }
  }
}

// creates a zip file for a release
task zipRel(type: Zip, dependsOn: copyRel) {
    from 'build/jason-'+project.version
    archiveBaseName = 'jason'
}

/**
 * Gradle task to execute unit tests for Jason agents
 * To run this script in a virtual machine to simulate a CI environment type:
 * $ docker volume create --name gradle-cache
 * $ docker run -ti --rm -u gradle -v gradle-cache:/home/gradle/.gradle -v "$PWD":/home/gradle/project -w /home/gradle/project -p 8000:8000 gradle:6.3.0-jdk11 bash -c "./gradlew config test -i"
 */
task testJason(dependsOn: 'config') {
    description 'runs Jason unit tests: tests.mas2j'
    def errorOnTests = false
    outputs.upToDateWhen { false } // disable cache

    doFirst {
        try {
            javaexec {
                jvmArgs += '--enable-preview'
                main = 'jason.infra.local.RunLocalMAS'
                if (gradle.startParameter.logLevel.toString().equals("DEBUG")) {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/main/resources/templates/console-debug-logging.properties']
                } else if (gradle.startParameter.logLevel.toString().equals("INFO")) {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/main/resources/templates/console-info-logging.properties']
                } else {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/main/resources/templates/console-lifecycle-logging.properties']
                }
                classpath sourceSets.main.runtimeClasspath
                sourceSets.test.java.srcDirs += ['src/test/jason/jia']

                errorOutput = new ByteArrayOutputStream()
                standardOutput = new ByteArrayOutputStream()

                ext.stdout = {
                    return standardOutput.toString()
                }
                ext.errout = {
                    return errorOutput.toString()
                }
            }
        } catch (Exception e) {
            errorOnTests = true
        }
    }

    doLast {
        def styler = 'black red green yellow blue magenta cyan white'
            .split().toList().withIndex(30)
            .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }

        def std = stdout()
        std.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        def err = errout()
        err.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        if (errorOnTests) {
            throw new GradleException('Jason unit tests: ERROR!')
        }
    }
}
tasks.build.finalizedBy testJason
